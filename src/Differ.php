<?php

namespace Differ\Differ;

function genDiff(string $file1, string $file2): string // Мы принимаем 2 пути к файлам (НЕ САМИ ФАЙЛЫ, пример - $file1 = 'path/to/file1.json';) для сравнения в формате строк
{
    $data1 = json_decode(file_get_contents($file1), true); // 1. file_get_contents — Читает содержимое файла и возвращает строку
    $data2 = json_decode(file_get_contents($file2), true); // 2. json_decode Декодирует строку JSON в тип РНР (здесь это ассоциативный массив, Если true, объекты JSON будут возвращены как ассоциативные массивы (array)

    $keys = array_keys(array_merge($data1, $data2)); // 1. Сначала мы объединяем 2 массива 2. Далее мы возвращаем все или некоторое подмножество ключей массива. То есть мы получаем все ключи из 2 массивов.
    sort($keys); // Сортирует массив с ключами по возрастанию (здесь по алфавиту)

    if (json_last_error() !== JSON_ERROR_NONE) { // Функция возвращает последнюю ошибку (если она есть), которая возникла во время последнего кодирования или декодирования JSON, если при вызове не устанавливался флаг JSON_THROW_ON_ERROR. У этой функции нет параметров.
        throw new \Exception('Invalid JSON format in one of the files.'); // Если ошибка обнаружена, выбрасывается исключение с сообщением об ошибке.
    }

    $diff = array_map(function($key) use ($data1, $data2) { // Функция нужна для того, чтобы применить анонимную функцию (1 параметр) ко всем элементам массива $keys (2 параметр в конце).
        // Анонимная функция принимает 1 параметр $key и используется (use) 2 массива с данными JSON

        $oldValue = $data1[$key] ?? null; // Array_map пройдется по всем ключам массива $keys (как цикл) и вернет все значения (в итоге) по каждому из ключей
        $newValue = $data2[$key] ?? null; // null если ключа нет

        if ($oldValue === $newValue) { // Если значения для текущего ключа в обоих массивах одинаковы, то вернется строка с этим ключом и значением
            return "    $key: " . json_encode($oldValue); // Здесь $key - вернется ключ и обратно кодируем строки в данные (в формат JSON) для корректного отображения
        }

        $lines = [];

        if($oldValue !== null) { // Если значения различаются, то создается массив строк $lines. Для каждого массива проверяется наличие ключа. Если ключ есть в $data1, то к строке добавляется префикс - и наоборот для 2го.
            // Функция проверяет, существует ли в массиве заданный ключ или индекс. 
            $lines[] = " - $key: " . json_encode($oldValue); // Если есть значение в 
        }

        if($newValue !== null) {

            $lines[] = " + $key: " . json_encode($newValue);
        }
        return $lines; // implode — Объединяет элементы массива в строку. То есть мы объединяем все строки $lines и добавляем переход на новую строку.
        
    }, $keys);

    $flatDiff = [];
    foreach ($diff as $item) {
        if (is_array($item)) {
            $flatDiff = array_merge($flatDiff, $item);
        } else {
            $flatDiff[] = $item;
        }
    }
    
    $output = implode("\n", $flatDiff);
    return "{\n$output\n}"; // Объединяем все строки в массиве $diff, добавляем переходы на новую строку и добавляем фигурные скобки по заданию.
}